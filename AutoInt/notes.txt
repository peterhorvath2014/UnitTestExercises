MySum-M+D=RegularSum
M=MySum-RegularSum+D

MyMultiplication=RegularMultiplication*D/M
MyMultiplication=RegularMultiplication*D/(MySum-RegularSum+D)
MyMultiplication*(MySum-RegularSum+D) = RegularMultiplication*D
MyMultiplication*MySum - MyMultiplication*RegularSum + MyMultiplication*D = RegularMultiplication*D
MyMultiplication*MySum - MyMultiplication*RegularSum = RegularMultiplication*D - MyMultiplication*D
MyMultiplication*MySum - MyMultiplication*RegularSum = (RegularMultiplication - MyMultiplication)*D

MyMultiplication*(MySum - RegularSum) / (RegularMultiplication - MyMultiplication) = D


Exercise title:
Find duplicates in array

Exercise description:
There are numbers from 1 to N in an array. Out of these, one of the numbers gets duplicated and one is missing. The task is to find the duplicated number. 
Conditions: 
	you have to do it in O(n) time without using any auxilary space (array, bitsets, maps etc..).
	throw an IllegalArgumentException if the parameter is null, or its length is less than 2
	suppose that the input array meets the other requirements
	
Tests:
1)
Input: null
Output: IllegalArgumentException

2)
Input: {1}
Output: IllegalArgumentException

3)
Input: (2,2)
Output: 2

4)
Input: (1,3,3,4)
Output: 3

Code:
public int findDuplicate(int[] inputArray) {
  if (inputArray == null) {
    throw new IllegalArgumentException("The input array cannot be null!");
  }
  if (inputArray.length <= 1) {
    throw new IllegalArgumentException("The input array has to have more than one number!");
  }
  Integer regularSum = 0;
  Integer regularMulti = 1;
  Integer inputArraySum = 0;
  Integer inputArrayMulti = 1;
  for (int i = 1; i <= inputArray.length; i++) {
    regularSum += i; // LOCK
    regularMulti = regularMulti * i;
    inputArraySum += inputArray[i - 1]; // LOCK
    inputArrayMulti = inputArrayMulti * inputArray[i - 1]; // LOCK
  }
  int numerator = -1 * inputArrayMulti * (inputArraySum - regularSum);
  int denominator = regularMulti - inputArrayMulti; // LOCK
  return (denominator != 0) ? numerator / denominator : 0;
}
	
